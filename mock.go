// Code generated by mockery v2.20.0. DO NOT EDIT.

package go_http_client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HttpClientMock is an autogenerated mock type for the IHttpClient type
type HttpClientMock struct {
	mock.Mock
}

// Request provides a mock function with given fields: ctx, options
func (_m *HttpClientMock) Request(ctx context.Context, options *Options) (*Response, error) {
	ret := _m.Called(ctx, options)

	var r0 *Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Options) (*Response, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Options) *Response); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Options) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHttpClientMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewHttpClientMock creates a new instance of HttpClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHttpClientMock(t mockConstructorTestingTNewHttpClientMock) *HttpClientMock {
	mock := &HttpClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
